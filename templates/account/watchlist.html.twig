{% extends 'base.html.twig' %}
{% block title %}Ma liste{% endblock %}

{% block body %}
{# -------- HERO -------- #}
<section class="relative overflow-hidden rounded-3xl ring-1 ring-white/10 mb-8">
  <div class="absolute inset-0 -z-10 bg-gradient-to-br from-rose-600/20 via-fuchsia-600/10 to-blue-600/20"></div>
  <div class="p-6 md:p-8">
    <div class="flex flex-col md:flex-row md:items-end md:justify-between gap-4">
      <div>
        <h1 class="text-2xl md:text-3xl font-extrabold">Ma liste</h1>
        <p class="text-neutral-300 mt-1">Films & séries que tu veux voir ou garder sous la main.</p>
      </div>
      <div class="grid grid-cols-3 divide-x divide-white/10 rounded-xl overflow-hidden ring-1 ring-white/10">
        {% set total = items|length %}
        {% set countMovies = items|filter(i => i.mediaType == 'movie')|length %}
        {% set countTv = items|filter(i => i.mediaType == 'tv')|length %}
        <div class="bg-white/5 px-4 py-3 text-center">
          <div class="text-xl font-bold">{{ total }}</div>
          <div class="text-xs text-neutral-300">Total</div>
        </div>
        <div class="bg-white/5 px-4 py-3 text-center">
          <div class="text-xl font-bold">{{ countMovies }}</div>
          <div class="text-xs text-neutral-300">Films</div>
        </div>
        <div class="bg-white/5 px-4 py-3 text-center">
          <div class="text-xl font-bold">{{ countTv }}</div>
          <div class="text-xs text-neutral-300">Séries</div>
        </div>
      </div>
    </div>
  </div>
</section>

{# -------- CONTROLS BAR -------- #}
<section class="sticky top-2 z-[5] mb-6">
  <div class="rounded-2xl bg-neutral-900/80 backdrop-blur ring-1 ring-white/10 p-3">
    <div class="flex flex-wrap items-center gap-3">
      <div class="inline-flex rounded-xl overflow-hidden ring-1 ring-white/10">
        <button class="filter-pill px-3 py-1.5 text-sm font-medium bg-white/5 hover:bg-white/10" data-filter="all">Tout</button>
        <button class="filter-pill px-3 py-1.5 text-sm font-medium hover:bg-white/10" data-filter="movie">Films</button>
        <button class="filter-pill px-3 py-1.5 text-sm font-medium hover:bg-white/10" data-filter="tv">Séries</button>
      </div>

      <div class="flex-1 min-w-[200px]">
        <div class="relative">
          <input id="searchInput" type="search" placeholder="Rechercher un titre…"
                 class="w-full bg-neutral-800 rounded-xl pl-9 pr-3 py-2 text-sm ring-1 ring-white/10 focus:outline-none focus:ring-2 focus:ring-rose-500"
          >
          <svg class="absolute left-2.5 top-2.5 h-4 w-4 text-neutral-400" viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
        </div>
      </div>

      <div>
        <label class="text-xs text-neutral-400 block mb-1">Trier par</label>
        <select id="sortSelect" class="bg-neutral-800 rounded-xl px-3 py-2 text-sm ring-1 ring-white/10 focus:outline-none focus:ring-2 focus:ring-rose-500">
          <option value="added-desc">Ajout récent</option>
          <option value="added-asc">Ajout ancien</option>
          <option value="title-asc">Titre A → Z</option>
          <option value="title-desc">Titre Z → A</option>
          <option value="type">Type (Films puis Séries)</option>
        </select>
      </div>
    </div>
  </div>
</section>

{# -------- GRID -------- #}
{% if items is empty %}
  <div class="rounded-2xl bg-neutral-900 ring-1 ring-white/10 p-10 text-center">
    <div class="mx-auto max-w-md">
      <div class="aspect-video rounded-xl bg-white/5 ring-1 ring-white/10 mb-4 flex items-center justify-center">
        <svg class="h-10 w-10 text-neutral-400" viewBox="0 0 24 24" fill="none" stroke="currentColor"><rect x="3" y="5" width="18" height="14" rx="2"/><path d="m10 9 5 3-5 3z"/></svg>
      </div>
      <h2 class="text-lg font-semibold">Ta liste est vide</h2>
      <p class="text-neutral-400 mt-1">Ajoute des titres avec le bouton <span class="font-semibold">“➕ Ma liste”</span> sur les pages film/série.</p>
    </div>
  </div>
{% else %}
  <div id="cardsGrid" class="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 xl:grid-cols-6">
    {% for it in items %}
      {% set isMovie = it.mediaType == 'movie' %}
      {% set title = it.title %}
      {% set slug = title|slug %}
      {% set href = isMovie
        ? path('app_movie_show', { id: it.tmdbId, slug: slug })
        : path('app_tv_show',    { id: it.tmdbId, slug: slug })
      %}
      <article
        class="card group rounded-2xl overflow-hidden ring-1 ring-white/10 bg-neutral-900 hover:ring-rose-500/40 transition"
        data-type="{{ it.mediaType }}"
        data-title="{{ title|lower }}"
        data-added="{{ it.addedAt ? it.addedAt|date('U') : 0 }}"
      >
        <a href="{{ href }}" class="block">
          <div class="relative aspect-[2/3] bg-neutral-800">
            <img src="{{ img.img(it.posterPath, 'w342') }}" alt="{{ title }}" class="w-full h-full object-cover group-hover:scale-105 transition duration-500">
            <div class="absolute inset-0 pointer-events-none bg-gradient-to-t from-black/40 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition"></div>
            <span class="absolute left-2 top-2 px-2 py-1 text-[11px] rounded-md ring-1 ring-white/10
                         {{ isMovie ? 'bg-emerald-500/20 text-emerald-300' : 'bg-sky-500/20 text-sky-300' }}">
              {{ isMovie ? 'Film' : 'Série' }}
            </span>
            {% if it.addedAt %}
              <span class="absolute right-2 top-2 text-[11px] px-2 py-1 rounded-md bg-white/5 ring-1 ring-white/10 text-neutral-300">
                Ajouté {{ it.addedAt|date('d/m/Y') }}
              </span>
            {% endif %}
          </div>
          <div class="p-3">
            <h3 class="text-sm font-semibold line-clamp-2">{{ title }}</h3>
          </div>
        </a>

        {# actions #}
        <div class="px-3 pb-3 -mt-2 flex items-center justify-between">
          <a href="{{ href }}" class="text-xs text-neutral-400 hover:text-neutral-200 transition">Détails</a>
          {% if is_granted('ROLE_USER') %}
            <button
              class="btn-remove text-xs px-2 py-1 rounded-md bg-white/5 hover:bg-white/10 ring-1 ring-white/10"
              data-mediatype="{{ it.mediaType }}"
              data-id="{{ it.tmdbId }}"
              data-title="{{ it.title }}"
              data-poster="{{ it.posterPath }}"
              data-backdrop="{{ it.backdropPath }}"
            >Retirer</button>
          {% endif %}
        </div>
      </article>
    {% endfor %}
  </div>
{% endif %}
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
(() => {
  const grid = document.getElementById('cardsGrid');
  if (!grid) return;

  const pills = Array.from(document.querySelectorAll('.filter-pill'));
  const search = document.getElementById('searchInput');
  const sortSel = document.getElementById('sortSelect');

  // état
  let filter = 'all';
  let q = '';
  let sort = 'added-desc';

  // UI pills
  function updatePills() {
    pills.forEach(p => {
      const active = p.dataset.filter === filter;
      p.classList.toggle('bg-white/5', active);
      p.classList.toggle('text-white', active);
      p.classList.toggle('text-neutral-300', !active);
    });
  }
  pills.forEach(p => p.addEventListener('click', () => { filter = p.dataset.filter; apply(); updatePills(); }));
  updatePills();

  // filtre + recherche + tri
  function apply(){
    const cards = Array.from(grid.children);
    const ql = q.trim().toLowerCase();

    // filtre + search
    cards.forEach(c => {
      const type = c.dataset.type;
      const title = c.dataset.title || '';
      const visible = (filter === 'all' || type === filter) && (ql === '' || title.includes(ql));
      c.style.display = visible ? '' : 'none';
    });

    // tri (DOM reorder uniquement sur visibles)
    const visibles = cards.filter(c => c.style.display !== 'none');
    const cmp = {
      'added-desc': (a,b) => (+b.dataset.added) - (+a.dataset.added),
      'added-asc':  (a,b) => (+a.dataset.added) - (+b.dataset.added),
      'title-asc':  (a,b) => (a.dataset.title > b.dataset.title) ? 1 : -1,
      'title-desc': (a,b) => (a.dataset.title < b.dataset.title) ? 1 : -1,
      'type':       (a,b) => (a.dataset.type > b.dataset.type) ? 1 : (a.dataset.type < b.dataset.type ? -1 : 0)
    }[sort];

    visibles.sort(cmp);
    visibles.forEach(n => grid.appendChild(n));
  }

  search.addEventListener('input', e => { q = e.target.value; apply(); });
  sortSel.addEventListener('change', e => { sort = e.target.value; apply(); });

  apply();

  // --- Retirer via API (toggle) ---
  const csrf = '{{ csrf_token("watchlist") }}';
  grid.addEventListener('click', async (e) => {
    const btn = e.target.closest('.btn-remove');
    if (!btn) return;
    const card = btn.closest('.card');
    btn.disabled = true;
    btn.textContent = '...';
    try {
      const res = await fetch('{{ path("app_watchlist_toggle") }}', {
        method: 'POST',
        headers: { 'Content-Type':'application/json', 'X-CSRF-TOKEN': csrf },
        body: JSON.stringify({
          mediaType: btn.dataset.mediatype,
          tmdbId: parseInt(btn.dataset.id, 10),
          title: btn.dataset.title,
          poster: btn.dataset.poster || null,
          backdrop: btn.dataset.backdrop || null
        })
      });
      const data = await res.json();
      if (data.status === 'removed') {
        card.style.opacity = '0';
        setTimeout(() => card.remove(), 180);
      } else {
        btn.textContent = 'Erreur';
      }
    } catch(err){
      console.error(err);
      btn.textContent = 'Erreur';
    }
  });
})();
</script>
{% endblock %}

